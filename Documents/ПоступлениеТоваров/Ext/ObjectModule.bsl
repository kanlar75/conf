
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	СуммаПоДокументу = Товары.Итог("Стоимость");
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда 
		ТипОснованиеСтрока = СтрЗаменить(ДанныеЗаполнения.Метаданные().ПолноеИмя(), "Документ.", "");
		ТипДокументаСтрока = СтрЗаменить(ЭтотОбъект.Ссылка.Метаданные().ПолноеИмя(), "Документ.", "");
		Документ = ПолучениеДанныхНаСервере.ЕстьДокументВведенныйНаОсновании(ДанныеЗаполнения.Ссылка, ТипОснованиеСтрока, ТипДокументаСтрока);
		Если Документ = Ложь Тогда
			// Заполнение шапки
			Основание = ДанныеЗаполнения.Ссылка;
			Договор = ДанныеЗаполнения.Договор;
			Поставщик = ДанныеЗаполнения.Поставщик;
			Склад = ДанныеЗаполнения.Склад;
			СуммаПоДокументу = ДанныеЗаполнения.СуммаПоДокументу;
			Валюта = ДанныеЗаполнения.Валюта;
			ВидЦены = ДанныеЗаполнения.ВидЦены;
			Для Каждого ТекСтрокаТовары Из ДанныеЗаполнения.Товары Цикл
				НоваяСтрока = Товары.Добавить();
				НоваяСтрока.Количество = ТекСтрокаТовары.Количество;
				НоваяСтрока.Номенклатура = ТекСтрокаТовары.Номенклатура;
				НоваяСтрока.Стоимость = ТекСтрокаТовары.Стоимость;
				НоваяСтрока.Цена = ТекСтрокаТовары.Цена;
			КонецЦикла;
		Иначе
			ВызватьИсключение("По " + СлужебныеПроцедурыНаСервере.СформироватьПредставлениеДокумента(ДанныеЗаполнения.Ссылка) + 
			" уже существует " + СлужебныеПроцедурыНаСервере.СформироватьПредставлениеДокумента(Документ));
			
			Возврат; 
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	
	Курс = ПолучениеДанныхНаСервере.ПолучитьКурс(Валюта, Дата);
	Если НЕ Курс Тогда
		Сообщить("Для валюты " + Валюта + " курс не установлен или равен 0");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Движения.ТоварыНаСкладах.Записывать = Истина;
	Движения.Хозрасчетный.Записывать = Истина;  
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоступлениеТоваровТовары.Номенклатура КАК Номенклатура,
	|	ПоступлениеТоваровТовары.Количество КАК Количество,
	|	ПоступлениеТоваровТовары.Стоимость КАК Стоимость
	|ИЗ
	|	Документ.ПоступлениеТоваров.Товары КАК ПоступлениеТоваровТовары
	|ГДЕ
	|	ПоступлениеТоваровТовары.Количество <> 0
	|	И ПоступлениеТоваровТовары.Ссылка = &Ссылка
	|ИТОГИ
	|	СУММА(Количество),
	|	СУММА(Стоимость)
	|ПО
	|	Номенклатура";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаНоменклатура = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаНоменклатура.Следующий() Цикл
		
		// регистр ТоварыНаСкладах Приход
		Движение = Движения.ТоварыНаСкладах.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
		Движение.Период = Дата;
		Движение.Номенклатура = ВыборкаНоменклатура.Номенклатура;
		Если НЕ ПолучитьФункциональнуюОпцию("УчетПоПартиям") Тогда
			Движение.Партия = Документы.ПоступлениеТоваров.ПустаяСсылка();
		Иначе
			Движение.Партия = Ссылка;	
		КонецЕсли; 			
		Движение.Склад = Склад;
		Движение.Количество = ВыборкаНоменклатура.Количество;
		Движение.Сумма = ВыборкаНоменклатура.Стоимость * Курс;
		
		// регистр Хозрасчетный		
		Движение = Движения.Хозрасчетный.Добавить();
		Движение.СчетДт = ПланыСчетов.Хозрасчетный.ТоварыНаСкладах;
		Движение.СчетКт = ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками;
		Движение.Период = Дата;
		Движение.Сумма = ВыборкаНоменклатура.Стоимость * Курс;
		Движение.КоличествоДт = ВыборкаНоменклатура.Количество; 
		Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.Номенклатура] = ВыборкаНоменклатура.Номенклатура;
		Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.Склады] = Склад;
		Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.Партии] = Ссылка;
		Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.Контрагенты] = Поставщик;
		Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.Договоры] = Договор;
		
	КонецЦикла;
	
КонецПроцедуры
